#!/bin/bash

showHelp() {
  echo "Usage: $0 [-q] [-d] <patchfile>"
  echo "";
  echo "  -q (--quiet)  Enable quiet mode, only log detected issues"
  echo "  -d (--debug)  Enable debug mode (very verbose)"
}

# Arguments
flagQuiet=0;
flagDebug=0;
PATCH="";

# Local
INTLIST=$(mktemp);
RC=0;

params=$(getopt -n $(basename $0) -s sh -o qd --long quiet,debug -- "$@")
if [ $? -ne 0 ] ; then
  showHelp
  exit 1
fi

eval set -- "${params}"
while [ $# -gt 0 ] ; do
  case "$1" in
    (-q) flagQuiet=1;;
    (--quiet) flagQuiet=1;;
    (-d) flagDebug=1;;
    (--debug) flagDebug=1;;
    (--) shift; break;;
    (-*) echo "$(basename $0): error: Unrecognized option $1" 1>&2; exit 1;;
    (*) break;
  esac
  shift;
done

PATCH=$1;

log() {
  if [ $flagQuiet -eq 0 ] ; then
    echo $*;
  fi
}

debug() {
  if [ $flagDebug -eq 1 ] ; then
    echo "DEBUG: $*";
  fi
}

log "SELinux patch verification helper utility";
log "-----------------------------------------";
log "Patch (argument)         = ${PATCH}";
log "Policy (POLICY_LOCATION) = ${POLICY_LOCATION}";
log "";
log "0. Preparing (meta)data for validation.";

debug "Calling selist, storing as ${INTLIST}";
selist > ${INTLIST};
debug "selist finished, ${INTLIST} written with $(wc -l ${INTLIST} | cut -f 1 -d ' ') lines"

log "1. Validating if called interfaces exist.";

# The CALLED_INTERFACE variable must contain a called interface
# name, without the (...), which is used in the patch (as
# an added (+) line).

for CALLED_INTERFACE in $(
	grep -A 99999 '^diff \-\-git' ${PATCH} | \
	grep -E '^\+[ 	]*[a-zA-Z0-9_]+\([^`]*\)' | \
	sed -e 's:^\+[ 	]*::g' | \
	sed -e 's:(.*::g' | \
	sort | uniq
); do
  debug "Checking if interface exists: ${CALLED_INTERFACE}"
  grep -q ${CALLED_INTERFACE} ${INTLIST};
  if [ $? -ne 0 ] ; then
    debug "  No interface, macro?"
    # Perhaps it is a macro, so we expand the interface
    # as if it was a macro. If a "define(" line comes up,
    # then it is a definition/macro.
    seshowdef ${CALLED_INTERFACE} | grep -q "^define";
    if [ $? -ne 0 ] ; then
      echo "  > interface ${CALLED_INTERFACE} does not exist";
      RC=1;
    fi
  fi
done

log "2. Validating if types exist in the main file.";

# CHANGED_FILE should be the filename as is documented
# in the patch (but without the leading "b/").

for CHANGED_FILE in $(
	grep '^+++ b/' ${PATCH} | \
	sed -e 's:^+++ b/::g'
) ; do

  debug "Checking file: ${CHANGED_FILE}"

  # FQP_CHANGED_FILE is the fully qualified path of the same file
  # Use ${FQP_CHANGED_FILE%%.??}.te to refer to the type declaration.

  FQP_CHANGED_FILE="";
  if [ -f ${POLICY_LOCATION}/${CHANGED_FILE} ] ; then
    FQP_CHANGED_FILE="${POLICY_LOCATION}/${CHANGED_FILE}";
  elif [ -f ${POLICY_LOCATION}/policy/modules/contrib/${CHANGED_FILE} ] ; then
    FQP_CHANGED_FILE="${POLICY_LOCATION}/policy/modules/contrib/${CHANGED_FILE}";
  else
    echo "  > File ${CHANGED_FILE} was not found!";
    RC=1;
  fi

  debug "  File is at ${FQP_CHANGED_FILE}";

  # Changed file is at FQP_CHANGED_FILE
  # Let's find all types that are used

  # TYPE_CALLS should contain all types that are used in the
  # patch, so matching abc_t.
  TYPE_CALLS=$(grep -A 99999 -m 1 "^\+\+\+ b/${CHANGED_FILE}" ${PATCH} | \
  	grep -B 99999 -m 1 -E "^(diff \-\-git|\-\- )" | \
	grep "^\+" | \
	grep -o -E "[a-zA-Z0-9_]*_t[ ,()$;]" | \
	sed -e "s:[ ,();]::g" | sort | uniq);
  for TYPE_CALL in ${TYPE_CALLS};
  do
    debug "  Checking type existence: ${TYPE_CALL}";
    # TYPE_CALL contains a type that is explicitly used in the patch,
    # for the CHANGED_FILE, so its definition *must* be in that file.
    # We look for "type ..." declarations...
    grep -q "^[ 	]*type ${TYPE_CALL}" ${FQP_CHANGED_FILE%%.??}.te;
    if [ $? -ne 0 ] ; then
      debug "    No explicit type declaration, is it an alias?"
      # No declaration, but perhaps it is an alias
      grep -q ".* alias.* ${TYPE_CALL}" ${FQP_CHANGED_FILE%%.??}.te;
      if [ $? -ne 0 ] ; then
        debug "    No explicit alias declaration, perhaps in a template?"
        # Type might be declared in a template. Let us assume that there is
	# no template-in-a-template, so call through all templates...
	FOUND=0;

	# TEMPLATES should give us all matching template calls, i.e. like
	# interface calls, in the main file (not just the patch lines), but
	# those that do not have a type as their first argument.
	# It might still mean that it is not a template (just an attribute
	# instead of a type) but we'll match that later on with seshowif.

        TEMPLATES=$(grep -o "^[ 	]*[a-zA-Z0-9_]*([^,)]*[,)].*" ${FQP_CHANGED_FILE%%.??}.te | \
		grep -v "\`" | grep -v "([a-zA-Z0-9_]*_t" | \
		sed -e 's:^[ 	]*\([a-zA-Z0-9_]*\)(\([^,)]*\)[,)].*:\1(\2):g' | \
		sort | uniq);

	for TEMPLATE in ${TEMPLATES}; do
	  TEMPLATE_NAME=$(echo ${TEMPLATE} | sed -e 's:(.*)::g');
	  TEMPLATE_ARG=$(echo ${TEMPLATE} | sed -e 's:.*(\(.*\)):\1:g');

          debug "      Trying ${TEMPLATE_NAME} with argument ${TEMPLATE_ARG}";

	  # If TEMPLATE_ARG is not part of TYPE_CALL then we can dismiss it
	  echo ${TYPE_CALL} | grep -q ${TEMPLATE_ARG} || continue;

	  seshowif ${TEMPLATE_NAME} | grep -q template || continue;
	  seshowif ${TEMPLATE_NAME} | grep "^[ 	]*type " | \
	  	sed -e "s:\$1:${TEMPLATE_ARG}:g" | grep -q ${TYPE_CALL};
          if [ $? -eq 0 ] ; then
            # Definition OK, break
	    FOUND=1;
	    debug "        Template ${TEMPLATE_NAME} generated ${TYPE_CALL}"
	    break;
	  fi
	done

        if [ ${FOUND} -eq 0 ] ; then
          echo "  > Patch references ${TYPE_CALL} in ${CHANGED_FILE} but no definition found";
          RC=1;
	fi
      else
        # TYPE_CALL is an alias, so should *not* be shown in any additional lines
	grep "^\+" ${PATCH} | grep -v " alias " | grep -q ${TYPE_CALL};
	if [ $? -eq 0 ] ; then
          echo "  > Patch refers to alias ${TYPE_CALL} in ${CHANGED_FILE} outside plain alias definition";
	  RC=1;
	fi
      fi
    fi
  done
done

rm ${INTLIST};
exit ${RC};
