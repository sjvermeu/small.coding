#!/bin/bash

PATCH=$1;
INTLIST=$(mktemp);
RC=0;

echo "SELinux patch verification helper utility";
echo "-----------------------------------------";
echo "Patch (argument)         = ${PATCH}";
echo "Policy (POLICY_LOCATION) = ${POLICY_LOCATION}";
echo "";
echo "0. Preparing (meta)data for validation.";
selist > ${INTLIST};

echo "1. Validating if called interfaces exist.";

# The CALLED_INTERFACE variable must contain a called interface
# name, without the (...), which is used in the patch (as
# an added (+) line).

for CALLED_INTERFACE in $(
	grep -A 99999 -m 1 '^diff \-\-git' ${PATCH} | \
	grep -E '^\+[ 	]*[a-zA-Z0-9_]+\([^`]*\)' | \
	sed -e 's:^\+[ 	]*::g' | \
	sed -e 's:(.*::g'
); do
  grep -q ${CALLED_INTERFACE} ${INTLIST};
  if [ $? -ne 0 ] ; then
    # Perhaps it is a macro, so we expand the interface
    # as if it was a macro. If a "define(" line comes up,
    # then it is a definition/macro.
    seshowdef ${CALLED_INTERFACE} | grep -q "^define";
    if [ $? -ne 0 ] ; then
      echo "  > interface ${CALLED_INTERFACE} does not exist";
      RC=1;
    fi
  fi
done

echo "2. Validating if types exist in the main file.";

# CHANGED_FILE should be the filename as is documented
# in the patch (but without the leading "b/").

for CHANGED_FILE in $(
	grep '^+++ b/' ${PATCH} | \
	sed -e 's:^+++ b/::g'
) ; do

  # FQP_CHANGED_FILE is the fully qualified path of the same file
  # Use ${FQP_CHANGED_FILE%%.??}.te to refer to the type declaration.

  FQP_CHANGED_FILE="";
  if [ -f ${POLICY_LOCATION}/${CHANGED_FILE} ] ; then
    FQP_CHANGED_FILE="${POLICY_LOCATION}/${CHANGED_FILE}";
  elif [ -f ${POLICY_LOCATION}/policy/modules/contrib/${CHANGED_FILE} ] ; then
    FQP_CHANGED_FILE="${POLICY_LOCATION}/policy/modules/contrib/${CHANGED_FILE}";
  else
    echo "  > File ${CHANGED_FILE} was not found!";
    RC=1;
  fi

  # Changed file is at FQP_CHANGED_FILE
  # Let's find all types that are used

  # TYPE_CALLS should contain all types that are used in the
  # patch, so matching abc_t.
  TYPE_CALLS=$(grep -A 99999 -m 1 "^\+\+\+ b/${CHANGED_FILE}" ${PATCH} | \
  	grep -B 99999 -m 1 -E "^(diff \-\-git|\-\- )" | \
	grep "^\+" | \
	grep -o -E "[a-zA-Z0-9_]*_t[ ,($]" | \
	sed -e "s:[ ,(]::g" | sort | uniq);
  for TYPE_CALL in ${TYPE_CALLS};
  do
    # TYPE_CALL contains a type that is explicitly used in the patch,
    # for the CHANGED_FILE, so its definition *must* be in that file.
    # We look for "type ..." declarations...
    grep -q "^[ 	]*type ${TYPE_CALL}" ${FQP_CHANGED_FILE%%.??}.te;
    if [ $? -ne 0 ] ; then
      # No declaration, but perhaps it is an alias
      grep -q ".* alias.* ${TYPE_CALL}" ${FQP_CHANGED_FILE%%.??}.te;
      if [ $? -ne 0 ] ; then
        # Type might be declared in a template. Let us assume that there is
	# no template-in-a-template, so call through all templates...
	FOUND=0;

	# TEMPLATES should give us all matching template calls, i.e. like
	# interface calls, in the main file (not just the patch lines), but
	# those that do not have a type as their first argument.
	# It might still mean that it is not a template (just an attribute
	# instead of a type) but we'll match that later on with seshowif.

        TEMPLATES=$(grep -o "^[ 	]*[a-zA-Z0-9_]*([^,)]*[,)].*" ${FQP_CHANGED_FILE%%.??}.te | \
		grep -v "\`" | grep -v "([a-zA-Z0-9_]*_t" | \
		sed -e 's:^[ 	]*\([a-zA-Z0-9_]*\)(\([^,)]*\)[,)].*:\1(\2):g' | \
		sort | uniq);

	for TEMPLATE in ${TEMPLATES}; do
	  TEMPLATE_NAME=$(echo ${TEMPLATE} | sed -e 's:(.*)::g');
	  TEMPLATE_ARG=$(echo ${TEMPLATE} | sed -e 's:.*(\(.*\)):\1:g');

	  # If TEMPLATE_ARG is not part of TYPE_CALL then we can dismiss it
	  echo ${TYPE_CALL} | grep -q ${TEMPLATE_ARG} || continue;

	  seshowif ${TEMPLATE_NAME} | grep -q template || continue;
	  seshowif ${TEMPLATE_NAME} | grep "^[ 	]*type " | \
	  	sed -e "s:\$1:${TEMPLATE_ARG}:g" | grep -q ${TYPE_CALL};
          if [ $? -eq 0 ] ; then
            # Definition OK, break
	    FOUND=1;
	    break;
	  fi
	done

        if [ ${FOUND} -eq 0 ] ; then
          echo "  > Patch references ${TYPE_CALL} in ${CHANGED_FILE} but no definition found";
          RC=1;
	fi
      else
        # TYPE_CALL is an alias, so should *not* be shown in any additional lines
	grep "^\+" ${PATCH} | grep -v " alias " | grep -q ${TYPE_CALL};
	if [ $? -ne 0 ] ; then
          echo "  > Patch refers to alias ${TYPE_CALL} in ${CHANGED_FILE} outside plain alias definition";
	  RC=1;
	fi
      fi
    fi
  done
done

rm ${INTLIST};
exit ${RC};
